{"version":3,"sources":["assets/JackHuResume.pdf","components/ProjectCard.js","components/Portfolio.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ProjectCard","props","state","width","height","updateWindowDimensions","bind","this","window","addEventListener","removeEventListener","setState","innerWidth","innerHeight","align","project","playerwidth","playerheight","Box","elevation","justify","direction","background","pad","media","type","url","uri","controls","volume","muted","playing","Image","src","Heading","title","Text","desc","Component","Portfolio","projects","Grommet","map","App","particlesParams","theme","global","font","family","size","color","overflow","Stack","anchor","params","margin","vertical","left","bottom","gap","Anchor","href","target","LinkedinOption","Github","resume","DocumentText","right","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f2dd331.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/JackHuResume.145a8269.pdf\";","import React, { Component } from \"react\";\r\nimport { Box, Image, Text, Heading } from \"grommet\";\r\nimport ReactPlayer from 'react-player';\r\n\r\n\r\nexport default class ProjectCard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ...props,\r\n            width: 0,\r\n            height: 0,\r\n        };\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    updateWindowDimensions() {\r\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n    }\r\n\r\n    render() {\r\n        let { align, project, width } = this.state;\r\n        let playerwidth = 640;\r\n        if (width < 1000) {\r\n            align = \"column\";\r\n            playerwidth = width - 20;\r\n        }\r\n\r\n        let playerheight = (playerwidth * 3) / 4;\r\n\r\n        return (\r\n            <Box elevation={align == \"row\" ? \"medium\" : \"none\"} align=\"center\" justify=\"center\" direction={align} background=\"#0f2026\" pad=\"large\">\r\n                <div>\r\n                    {\r\n                        project.media.type === \"video\" ?\r\n                            <ReactPlayer width={playerwidth} height={playerheight} url={project.media.uri} controls volume={1} muted playing />\r\n                            :\r\n                            <Image src={project.media.uri} />\r\n                    }\r\n                </div>\r\n                <Box pad=\"medium\">\r\n                    <Heading>{project.title}</Heading>\r\n                    <Text>{project.desc}</Text>\r\n                </Box>\r\n            </Box>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Grommet, Box } from 'grommet';\r\nimport ProjectCard from './ProjectCard';\r\n\r\nexport default class Portfolio extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            projects: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let projects = [{\r\n            title: \"Flex Mirror\",\r\n            desc: \"Used React with ElectronJS to design a full-featured interface which would appear in a mirror, powered by a Raspberry Pi. Also, integrated smart mirror software with an OpenCV-based facial recognition system. Finally, implemented the IBM Watson API to create an assistant with a trigger word.\",\r\n            media: { type: \"video\", uri: \"https://youtu.be/cZ8H2EFwmOU\" }\r\n        }]\r\n\r\n        this.setState({\r\n            projects: projects\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { projects } = this.state;\r\n        let align = \"row-reverse\";\r\n        return (\r\n            <Grommet>\r\n                <Box>\r\n                    {projects.map((project) => {\r\n                        align = align === \"row-reverse\" ? \"row\" : \"row-reverse\";\r\n                        return (\r\n                            <ProjectCard align={align} project={project}\r\n                            />\r\n                        );\r\n                    }\r\n                    )}\r\n                </Box>\r\n            </Grommet>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Grommet, Stack, Box, Heading, Text, Anchor } from 'grommet'\r\nimport { LinkedinOption, Github, DocumentText } from 'grommet-icons';\r\nimport Particles from 'react-particles-js';\r\nimport Portfolio from './components/Portfolio';\r\nimport resume from './assets/JackHuResume.pdf';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { width: 0, height: 0 };\r\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateWindowDimensions();\r\n    window.addEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n\r\n  updateWindowDimensions() {\r\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n  }\r\n\r\n  render() {\r\n    const theme = {\r\n\r\n      global: {\r\n        font: {\r\n          family: 'Assistant',\r\n          size: '18px',\r\n          height: '20px',\r\n          color: 'white'\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    const particlesParams = {\r\n      \"particles\": {\r\n        \"number\": {\r\n          \"value\": ((this.state.width * this.state.height) / 13824)\r\n        },\r\n        \"size\": {\r\n          \"value\": 0\r\n        }\r\n      },\r\n      \"interactivity\": {\r\n        \"events\": {\r\n          \"onhover\": {\r\n            \"enable\": true,\r\n            \"mode\": \"repulse\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Grommet theme={theme}>\r\n        <Box overflow=\"hidden\">\r\n          <Stack anchor=\"bottom-left\">\r\n\r\n            <Box height='100vh' align='center' justify='center' background=\"#0f2026\">\r\n              <Particles params={particlesParams} width=\"100vw\" height=\"100vh\" />\r\n            </Box>\r\n            <Box margin={{ vertical: \"100px\", left: \"medium\" }}>\r\n              <Heading color=\"white\" size=\"100px\" margin={{ bottom: \"0px\" }}>Jack Hu</Heading>\r\n              <Text color=\"white\">Professional. Fun-loving. At the same time.</Text>\r\n            </Box>\r\n          </Stack>\r\n          <Box elevation=\"medium\" direction=\"row\" justify=\"center\" gap=\"large\" pad=\"medium\">\r\n            <Anchor href=\"https://www.linkedin.com/in/jackhu242/\" target=\"_blank\">\r\n              <LinkedinOption size=\"large\" />\r\n            </Anchor>\r\n            <Anchor href=\"https://www.github.com/jh242/\" target=\"_blank\">\r\n              <Github size=\"large\" />\r\n            </Anchor>\r\n            <Anchor href={resume} target=\"_blank\">\r\n              <DocumentText size=\"large\" />\r\n            </Anchor>\r\n          </Box>\r\n          <Box margin={{ left: \"xlarge\", right: \"xlarge\" }}>\r\n            <Heading>A bit more about me.</Heading>\r\n            <Box>\r\n              <Text margin={{ bottom: \"xlarge\" }}>\r\n                Hi! Thanks for checking out my personal page.\r\n                I'm currently a student studying Software Engineering at the University of Waterloo.\r\n                In my spare time, I like to cook, play the piano, or play a few rounds of whatever game I'm into at the time.\r\n                I'm interested in machine learning and data analysis, along with full stack web/mobile development.\r\n                Check out what I've been working on at my GitHub! This page is still a work in progress.\r\n            </Text>\r\n            </Box>\r\n          </Box>\r\n          <Portfolio />\r\n        </Box>\r\n      </Grommet>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register (config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}