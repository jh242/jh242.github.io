{"version":3,"sources":["components/IntroWindow.jsx","components/Bio.jsx","App.jsx","serviceWorker.js","index.jsx","assets/JackHuResume.pdf","assets/icons/github.svg","assets/icons/linkedin.svg","assets/icons/profile.svg","assets/icons/down.svg","assets/me.jpg"],"names":["IntroWindow","textControls","useAnimation","logoControls","start","opacity","transition","delay","ease","duration","y","className","h1","initial","animate","p","href","img","src","linkedin","width","height","github","resume","profile","down","loop","Bio","document","documentElement","clientWidth","h2","me","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"+SAYe,SAASA,IACtB,IAAMC,EAAeC,cACfC,EAAeD,cAarB,OAXAD,EAAaG,MAAM,CACjBC,QAAS,EACTC,WAAY,CAAEC,MAAO,IAAKC,KAAM,UAAWC,SAAU,KAGvDN,EAAaC,MAAM,CACjBC,QAAS,EACTK,EAAG,GACHJ,WAAY,CAAEC,MAAO,IAAKC,KAAM,UAAWC,SAAU,KAIrD,yBAAKE,UAAU,SACb,yBAAKA,UAAU,SACb,kBAAC,IAAOC,GAAR,CACEC,QAAS,CAAER,QAAS,GACpBS,QAASb,GAFX,WAMA,kBAAC,IAAOc,EAAR,CACEF,QAAS,CAAER,QAAS,GACpBS,QAASb,GAFX,yDAOF,yBAAKU,UAAU,UACb,yBAAKA,UAAU,SACb,uBAAGK,KAAK,yCACN,kBAAC,IAAOC,IAAR,CACEC,IAAKC,IACLN,QAAS,CAAER,QAAS,EAAGe,MAAO,GAAIC,OAAQ,IAC1CP,QAASX,KAGb,uBAAGa,KAAK,gCACN,kBAAC,IAAOC,IAAR,CACEC,IAAKI,IACLT,QAAS,CAAER,QAAS,EAAGe,MAAO,GAAIC,OAAQ,IAC1CP,QAASX,KAGb,uBAAGa,KAAMO,KACP,kBAAC,IAAON,IAAR,CACEC,IAAKM,IACLX,QAAS,CAAER,QAAS,EAAGe,MAAO,GAAIC,OAAQ,IAC1CP,QAASX,MAIf,kBAAC,IAAOc,IAAR,CACEC,IAAKO,IACLX,QAAS,CAAEJ,EAAG,CAAC,EAAG,GAAI,IACtBJ,WAAY,CAAEE,KAAM,YAAakB,KAAM,WAAYjB,SAAU,O,qBC/DxD,SAASkB,IAEtB,IAAMP,EAAQQ,SAASC,gBAAgBC,YAEvC,OACE,yBAAKnB,UAAWS,EAAQ,KAAO,aAAe,OAC5C,yBAAKT,UAAU,YACb,kBAAC,IAAOoB,GAAR,uBACA,kBAAC,IAAOhB,EAAR,ubASF,kBAAC,IAAOE,IAAR,CACEN,UAAU,QACVO,IAAKc,O,OCHEC,MAVf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,IAAD,CAAWA,UAAU,cACrB,kBAACX,EAAD,MACA,kBAAC2B,EAAD,QCNcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASZ,SAASa,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,gC","file":"static/js/main.5fb2b028.chunk.js","sourcesContent":["import React from 'react';\n\nimport {\n  motion, useAnimation,\n} from 'framer-motion';\n\nimport resume from '../assets/JackHuResume.pdf';\nimport github from '../assets/icons/github.svg';\nimport linkedin from '../assets/icons/linkedin.svg';\nimport profile from '../assets/icons/profile.svg';\nimport down from '../assets/icons/down.svg';\n\nexport default function IntroWindow() {\n  const textControls = useAnimation();\n  const logoControls = useAnimation();\n\n  textControls.start({\n    opacity: 1,\n    transition: { delay: 1.2, ease: 'easeOut', duration: 1 },\n  });\n\n  logoControls.start({\n    opacity: 1,\n    y: 25,\n    transition: { delay: 1.2, ease: 'easeOut', duration: 1 },\n  });\n\n  return (\n    <div className=\"intro\">\n      <div className=\"title\">\n        <motion.h1\n          initial={{ opacity: 0 }}\n          animate={textControls}\n        >\n          Jack Hu\n        </motion.h1>\n        <motion.p\n          initial={{ opacity: 0 }}\n          animate={textControls}\n        >\n          Professional. Fun-loving. All at the same time. WIP.\n        </motion.p>\n      </div>\n      <div className=\"footer\">\n        <div className=\"logos\">\n          <a href=\"https://www.linkedin.com/in/jackhu242\">\n            <motion.img\n              src={linkedin}\n              initial={{ opacity: 0, width: 50, height: 50 }}\n              animate={logoControls}\n            />\n          </a>\n          <a href=\"https://www.github.com/jh242\">\n            <motion.img\n              src={github}\n              initial={{ opacity: 0, width: 50, height: 50 }}\n              animate={logoControls}\n            />\n          </a>\n          <a href={resume}>\n            <motion.img\n              src={profile}\n              initial={{ opacity: 0, width: 50, height: 50 }}\n              animate={logoControls}\n            />\n          </a>\n        </div>\n        <motion.img\n          src={down}\n          animate={{ y: [0, 10, 0] }}\n          transition={{ ease: 'easeInOut', loop: 'Infinity', duration: 1 }}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport {\n  motion,\n} from 'framer-motion';\n\nimport me from '../assets/me.jpg';\n\nexport default function Bio() {\n  // eslint-disable-next-line no-undef\n  const width = document.documentElement.clientWidth;\n\n  return (\n    <div className={width < 1350 ? 'bio-mobile' : 'bio'}>\n      <div className=\"bio-text\">\n        <motion.h2>More about me.</motion.h2>\n        <motion.p>\n          Hi! Thanks for checking out my personal page.\n          I&apos;m currently a student studying Software Engineering at the University of Waterloo.\n          In my spare time, I like to cook, play the piano, or play a few rounds of whatever game\n          I&apos;m into at the time. I&apos;m interested in machine learning and data analysis,\n          along with full stack web/mobile development. Check out what I&apos;ve been working on\n          at my GitHub! This page is still a work in progress.\n        </motion.p>\n      </div>\n      <motion.img\n        className=\"image\"\n        src={me}\n      />\n    </div>\n  );\n}\n","// Component imports\nimport React from 'react';\nimport Particles from 'react-particles-js';\nimport {\n  IntroWindow,\n  Bio,\n} from './components';\n\n// Give it some style!\nimport './App.css';\n\n// Asset imports\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Particles className=\"particles\" />\n      <IntroWindow />\n      <Bio />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/JackHuResume.b1bab688.pdf\";","module.exports = __webpack_public_path__ + \"static/media/github.0e6e51cc.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.19e539a5.svg\";","module.exports = __webpack_public_path__ + \"static/media/profile.5aceb5ae.svg\";","module.exports = __webpack_public_path__ + \"static/media/down.399ce17b.svg\";","module.exports = __webpack_public_path__ + \"static/media/me.e3922b03.jpg\";"],"sourceRoot":""}