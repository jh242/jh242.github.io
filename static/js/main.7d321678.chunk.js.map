{"version":3,"sources":["assets/JackHuResume.pdf","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","Grommet","theme","global","font","family","size","height","color","Box","overflow","Stack","anchor","align","justify","background","params","width","Heading","margin","left","top","bottom","Text","right","elevation","direction","gap","pad","Anchor","href","target","LinkedinOption","Github","resume","DocumentText","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,0C,+RC+E5BC,E,iLA1DX,OACE,kBAACC,EAAA,EAAD,CAASC,MAdG,CAEZC,OAAQ,CACNC,KAAM,CACJC,OAAQ,YACRC,KAAM,OACNC,OAAQ,OACRC,MAAO,YAQT,kBAACC,EAAA,EAAD,CAAKC,SAAS,UACZ,kBAACC,EAAA,EAAD,CAAOC,OAAO,YAEZ,kBAACH,EAAA,EAAD,CAAKF,OAAO,QAAQM,MAAM,SAASC,QAAQ,SAASC,WAAW,WAC7D,kBAAC,IAAD,CAAWC,OAAQ,CACjB,UAAa,CACX,OAAU,CACR,MAAS,KAEX,KAAQ,CACN,MAAS,IAGb,cAAiB,CACf,OAAU,CACR,QAAW,CACT,QAAU,EACV,KAAQ,cAIbC,MAAM,QAAQV,OAAO,WAE1B,kBAACE,EAAA,EAAD,KACE,kBAACS,EAAA,EAAD,CAASV,MAAM,QAAQF,KAAK,QAAQa,OAAQ,CAAEC,KAAM,SAAUC,IAAK,SAAUC,OAAQ,QAArF,WACA,kBAACC,EAAA,EAAD,CAAMf,MAAM,QAAQW,OAAQ,CAAEC,KAAM,SAAUI,MAAO,WAArD,iDAGJ,kBAACf,EAAA,EAAD,CAAKgB,UAAU,SAASC,UAAU,MAAMZ,QAAQ,SAASa,IAAI,QAAQC,IAAI,UACvE,kBAACC,EAAA,EAAD,CAAQC,KAAK,yCAAyCC,OAAO,UAC3D,kBAACC,EAAA,EAAD,CAAgB1B,KAAK,WAEvB,kBAACuB,EAAA,EAAD,CAAQC,KAAK,gCAAgCC,OAAO,UAClD,kBAACE,EAAA,EAAD,CAAQ3B,KAAK,WAEf,kBAACuB,EAAA,EAAD,CAAQC,KAAMI,IAAQH,OAAO,UAC3B,kBAACI,EAAA,EAAD,CAAc7B,KAAK,YAGvB,kBAACG,EAAA,EAAD,CAAKU,OAAQ,CAAEC,KAAM,SAAUI,MAAO,WACpC,kBAACN,EAAA,EAAD,6BACA,kBAACT,EAAA,EAAD,KACE,kBAACc,EAAA,EAAD,CAAMJ,OAAQ,CAAEG,OAAQ,WAAxB,yb,GA3DIc,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7d321678.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/JackHuResume.1eabd083.pdf\";","import React, { Component } from 'react'\r\nimport { Grommet, Stack, Box, Heading, Text, Anchor } from 'grommet'\r\nimport { LinkedinOption, Github, DocumentText } from 'grommet-icons';\r\nimport Particles from 'react-particles-js';\r\nimport resume from './assets/JackHuResume.pdf';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    const theme = {\r\n\r\n      global: {\r\n        font: {\r\n          family: 'Assistant',\r\n          size: '18px',\r\n          height: '20px',\r\n          color: 'white'\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    return (\r\n      <Grommet theme={theme}>\r\n        <Box overflow=\"hidden\">\r\n          <Stack anchor=\"top-left\">\r\n\r\n            <Box height='100vh' align='center' justify='center' background=\"#0f2026\">\r\n              <Particles params={{\r\n                \"particles\": {\r\n                  \"number\": {\r\n                    \"value\": 200\r\n                  },\r\n                  \"size\": {\r\n                    \"value\": 0\r\n                  }\r\n                },\r\n                \"interactivity\": {\r\n                  \"events\": {\r\n                    \"onhover\": {\r\n                      \"enable\": true,\r\n                      \"mode\": \"repulse\"\r\n                    }\r\n                  }\r\n                }\r\n              }} width=\"100vw\" height=\"100vh\" />\r\n            </Box>\r\n            <Box>\r\n              <Heading color=\"white\" size=\"100px\" margin={{ left: \"medium\", top: \"medium\", bottom: \"0px\" }}>Jack Hu</Heading>\r\n              <Text color=\"white\" margin={{ left: \"medium\", right: \"medium\" }}>Professional. Fun-loving. At the same time.</Text>\r\n            </Box>\r\n          </Stack>\r\n          <Box elevation=\"medium\" direction=\"row\" justify=\"center\" gap=\"large\" pad=\"medium\">\r\n            <Anchor href=\"https://www.linkedin.com/in/jackhu242/\" target=\"_blank\">\r\n              <LinkedinOption size=\"large\" />\r\n            </Anchor>\r\n            <Anchor href=\"https://www.github.com/jh242/\" target=\"_blank\">\r\n              <Github size=\"large\" />\r\n            </Anchor>\r\n            <Anchor href={resume} target=\"_blank\">\r\n              <DocumentText size=\"large\" />\r\n            </Anchor>\r\n          </Box>\r\n          <Box margin={{ left: \"xlarge\", right: \"xlarge\" }}>\r\n            <Heading>A bit more about me.</Heading>\r\n            <Box>\r\n              <Text margin={{ bottom: \"xlarge\" }}>Hi! Thanks for checking out my personal page.\r\n              I'm currently a student studying Software Engineering at the University of Waterloo.\r\n              In my spare time, I like to cook, play the piano, or play a few rounds of whatever game I'm into at the time.\r\n              I'm interested in machine learning and data analysis, along with full stack web/mobile development. Check out what I've been working on at my GitHub!\r\n              This page is still a work in progress.\r\n            </Text>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n      </Grommet>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register (config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}